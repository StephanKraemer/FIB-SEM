function handle=WriteMRCHeaderVarMode(map,rez,mode,filename,nim)%  Save MRC file with desired class (mode)% -----------------------------------------------------------------------% % Write out the header of an MRC map file, and leave the file open,% returning the file handle, so that data can be written sequentially into% the file and then the file closed.  Data are written in little-endian% style.% %% Example: write out 10,000 images.%     images=randn(64,64,1000);%     f=WriteMRCHeader(images,2.8,'test.mrc',10000);%     fwrite(f,images,'float32');%     for i=2:10%         images=randn(64,64,1000);%         fwrite(f,images,'float32');%     end;%     fclose(f);%%% SK        Modified original function to save data in all possible classes%           (see variable 'mode')%% !!!       Make sure that the data range of map conforms to the desired%           mode %% SYNTAX    handle = WriteMRCHeader(sizes,rez,mode,filename,nim)%% INPUT     map         image series%           rez         cell size%           mode        data class%                       0    8 bit integer signed (-128-127)%                       1   16 bit integer signed (%                       2   32 bit real signed%                       3   16 bit integer complex%                       4   32 bit real complex%                       6   16 bit integer unsigned !%           filename%           nim         (o) If you want to write more images than are%                           contained in map, give the number in this%                           optional argument.%% OUTPUT    handle      file handle% % -----------------------------------------------------------------------% Files are always written in little-ended format.% Figure out if we have a little-ended machine.q=typecast(int32(1),'uint8');machineLE=(q(1)==1);  % true for little-endian machine% make structurehdr=int32(zeros(256,1));sizes=size(map);if numel(sizes)<3    sizes(3)=1;endif nargin>4    sizes(3)=nim;end% Get statisticsmap=reshape(map,numel(map),1);  % convert it into a 1D vectortheMean = mean(map);theSD   = std(single(map));theMax  = max(map);theMin  = min(map);% number of columns, rows, sectionshdr(1:3)=sizes; % SK allow every mode possiblehdr(4) = mode;  % mode: see help above% number of intervals along x,y,zhdr(8:10)=hdr(1:3);% Cell dimensions and angleshdr(11:13)=typecast(single(single(hdr(1:3))*rez),'int32');  hdr(14:16)=typecast(single([90 90 90]),'int32');% Axis assignmentshdr(17:19)=(1:3)';  hdr(20:22)=typecast(single([theMin theMax theMean]'),'int32');% Space group 0 (default)hdr(23)=0;  if machineLE     % LE machine stamp.    hdr(53)=typecast(uint8('MAP '),'int32');    hdr(54)=typecast(uint8([68 65 0 0]),'int32'); else    % LE machine stamp, for writing with BE machine.    hdr(53)=typecast(uint8(' PAM'),'int32');      hdr(54)=typecast(uint8([0 0 65 68]),'int32');endhdr(55)=typecast(single(theSD),'int32');% open file and write headerhandle=fopen(filename,'w','ieee-le');count1=fwrite(handle,hdr,'int32');% keep file open to write dataend